name: Release Desktop App

on:
  push:
    tags:
      - 'v*' # Déclenché quand vous poussez un tag comme v1.0.1

jobs:
  release:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest]

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          npm ci

      - name: Build Tauri app
        run: npm run tauri:build
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name: Generate latest.json from Tauri signature
        shell: pwsh
        run: |
          # Arrêter en cas d'erreur
          $ErrorActionPreference = "Stop"
          
          # Extraire la version depuis le tag
          $version = $env:GITHUB_REF -replace 'refs/tags/v', ''
          Write-Host "========================================" -ForegroundColor Cyan
          Write-Host "Version détectée: $version" -ForegroundColor Cyan
          Write-Host "========================================" -ForegroundColor Cyan
          
          # Chemin de l'installateur
          $exePath = "src-tauri\target\release\bundle\nsis\Formalyse_${version}_x64-setup.exe"
          $sigPath = "$exePath.sig"
          
          # Vérifier que les fichiers existent
          if (-not (Test-Path $exePath)) {
            Write-Error "Fichier introuvable: $exePath"
            exit 1
          }
          Write-Host "✓ Installateur trouvé: $exePath" -ForegroundColor Green
          
          if (-not (Test-Path $sigPath)) {
            Write-Error "Fichier de signature introuvable: $sigPath"
            Write-Host "Tauri n'a pas généré automatiquement la signature." -ForegroundColor Red
            Write-Host "Vérifiez que TAURI_PRIVATE_KEY et TAURI_KEY_PASSWORD sont bien définis pendant le build." -ForegroundColor Yellow
            exit 1
          }
          Write-Host "✓ Fichier de signature trouvé: $sigPath" -ForegroundColor Green
          
          # Lire la signature générée par Tauri
          $signature = Get-Content $sigPath -Raw
          $signature = $signature.Trim()
          
          if ([string]::IsNullOrWhiteSpace($signature)) {
            Write-Error "Signature vide ou invalide"
            exit 1
          }
          
          Write-Host "✓ Signature lue depuis le fichier .sig" -ForegroundColor Green
          Write-Host "  Signature: $($signature.Substring(0, [Math]::Min(50, $signature.Length)))..." -ForegroundColor Gray
          
          # URL de téléchargement
          $downloadUrl = "https://github.com/${{ github.repository }}/releases/download/v${version}/Formalyse_${version}_x64-setup.exe"
          
          # Date actuelle
          $pubDate = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          
          # Créer latest.json
          $latestJson = @{
            version = $version
            notes = "Release version $version"
            pub_date = $pubDate
            platforms = @{
              "windows-x86_64" = @{
                signature = $signature
                url = $downloadUrl
              }
            }
          } | ConvertTo-Json -Depth 10
          
          # Sauvegarder sans BOM
          $latestJson | Out-File -FilePath "latest.json" -Encoding utf8NoBOM -NoNewline
          
          Write-Host "========================================" -ForegroundColor Green
          Write-Host "latest.json créé avec succès !" -ForegroundColor Green
          Write-Host "========================================" -ForegroundColor Green
          Write-Host ""
          Write-Host "Contenu de latest.json:" -ForegroundColor Cyan
          Get-Content "latest.json" | Write-Host

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            src-tauri/target/release/bundle/nsis/Formalyse_*_x64-setup.exe
            latest.json
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

