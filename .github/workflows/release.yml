name: Release Desktop App

on:
  push:
    tags:
      - 'v*' # Déclenché quand vous poussez un tag comme v1.0.1

jobs:
  release:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest]

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          npm ci

      - name: Build Tauri app
        run: npm run tauri:build
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name: Sign and generate latest.json
        shell: pwsh
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        run: |
          # Arrêter en cas d'erreur
          $ErrorActionPreference = "Stop"
          
          # Extraire la version depuis le tag
          $version = $env:GITHUB_REF -replace 'refs/tags/v', ''
          Write-Host "Version détectée: $version" -ForegroundColor Cyan
          
          # Chemin de l'installateur
          $exePath = "src-tauri\target\release\bundle\nsis\Formalyse_${version}_x64-setup.exe"
          
          # Vérifier que le fichier existe
          if (-not (Test-Path $exePath)) {
            Write-Error "Fichier introuvable: $exePath"
            exit 1
          }
          Write-Host "Installateur trouvé: $exePath" -ForegroundColor Green
          
          # Créer un fichier temporaire pour la clé privée (sans BOM)
          $keyPath = ".tauri-key-temp"
          $env:TAURI_PRIVATE_KEY | Out-File -FilePath $keyPath -Encoding utf8NoBOM -NoNewline
          
          Write-Host "Clé privée créée. Longueur: $($env:TAURI_PRIVATE_KEY.Length) caractères" -ForegroundColor Gray
          Write-Host "Première ligne de la clé: $((Get-Content $keyPath -First 1))" -ForegroundColor Gray
          
          Write-Host "Signature de l'installateur en cours..." -ForegroundColor Yellow
          
          # Signer l'installateur
          try {
            $signatureOutput = npx --yes @tauri-apps/cli signer sign `
              "$exePath" `
              --private-key "$keyPath" `
              --password "$env:TAURI_KEY_PASSWORD" 2>&1 | Out-String
            
            Write-Host "Sortie complète de la signature:" -ForegroundColor Cyan
            Write-Host $signatureOutput
            
            if ($LASTEXITCODE -ne 0) {
              Write-Host "ERREUR: Code de sortie: $LASTEXITCODE" -ForegroundColor Red
              throw "Échec de la signature. Code de sortie: $LASTEXITCODE"
            }
            
            Write-Host "Signature réussie !" -ForegroundColor Green
          }
          catch {
            Write-Host "ERREUR CATCH: $_" -ForegroundColor Red
            throw "Erreur lors de la signature: $_"
          }
          finally {
            # Nettoyer la clé temporaire
            if (Test-Path $keyPath) {
              Remove-Item $keyPath -Force
            }
          }
          
          # Extraire la signature (dernière ligne non vide)
          $signature = ($signatureOutput -split "`n" | Where-Object { $_.Trim() -ne "" })[-1].Trim()
          
          if ([string]::IsNullOrWhiteSpace($signature)) {
            Write-Error "Signature vide ou invalide"
            exit 1
          }
          
          Write-Host "Signature extraite: $signature" -ForegroundColor Green
          
          # URL de téléchargement
          $downloadUrl = "https://github.com/${{ github.repository }}/releases/download/v${version}/Formalyse_${version}_x64-setup.exe"
          
          # Date actuelle
          $pubDate = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          
          # Créer latest.json
          $latestJson = @{
            version = $version
            notes = "Release version $version"
            pub_date = $pubDate
            platforms = @{
              "windows-x86_64" = @{
                signature = $signature
                url = $downloadUrl
              }
            }
          } | ConvertTo-Json -Depth 10
          
          # Sauvegarder sans BOM
          $latestJson | Out-File -FilePath "latest.json" -Encoding utf8NoBOM -NoNewline
          
          Write-Host "========================================" -ForegroundColor Green
          Write-Host "latest.json créé avec succès !" -ForegroundColor Green
          Write-Host "========================================" -ForegroundColor Green
          Write-Host ""
          Write-Host "Contenu de latest.json:" -ForegroundColor Cyan
          Get-Content "latest.json" | Write-Host

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            src-tauri/target/release/bundle/nsis/Formalyse_*_x64-setup.exe
            latest.json
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

