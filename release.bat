@echo off
chcp 65001 >nul
setlocal enabledelayedexpansion

echo.
echo ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
echo          üöÄ FORMALYSE - Release Automatique Locale            
echo ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
echo.

REM ============================================================
REM Configuration
REM ============================================================

set REPO_OWNER=yoyoboul
set REPO_NAME=formalyse

REM ============================================================
REM √âtape 0 : V√©rifier le token GitHub
REM ============================================================

echo üîê V√©rification du token GitHub...
echo.

REM V√©rifier si le token est d√©fini
if defined GITHUB_TOKEN (
    echo ‚úÖ Token GitHub trouv√© dans les variables d'environnement
    echo.
    set AUTO_UPLOAD=yes
    goto :token_configured
)

REM Pas de token trouv√©
echo ‚ö†Ô∏è  Aucun token GitHub trouv√©
echo.
echo Pour l'upload automatique, vous avez besoin d'un token GitHub.
echo.
echo üìù Comment obtenir un token :
echo    1. Allez sur : https://github.com/settings/tokens/new
echo    2. Permissions : repo + write:packages
echo    3. Copiez le token (ghp_...)
echo.
set /p hasToken="Avez-vous un token GitHub ? (y/n) : "

if /i "%hasToken%"=="y" (
    set /p GITHUB_TOKEN="Entrez votre token : "
    if defined GITHUB_TOKEN (
        set AUTO_UPLOAD=yes
        echo.
        echo ‚úÖ Token enregistr√© pour cette session
    ) else (
        set AUTO_UPLOAD=no
        echo.
        echo ‚ö†Ô∏è  Token vide - Mode manuel activ√©
    )
) else (
    set AUTO_UPLOAD=no
    echo.
    echo ‚ÑπÔ∏è  Mode manuel activ√© - vous devrez uploader les fichiers manuellement
)

:token_configured
echo.

REM ============================================================
REM √âtape 1 : Choix de la version
REM ============================================================

echo üìå Quelle version voulez-vous publier ?
echo.
echo    1. Patch (1.0.4 ^=^> 1.0.5)  - Correctifs mineurs
echo    2. Minor (1.0.4 ^=^> 1.1.0)  - Nouvelles fonctionnalit√©s
echo    3. Major (1.0.4 ^=^> 2.0.0)  - Changements majeurs
echo    4. Manuelle                  - Saisir manuellement (ex: 2.1.3)
echo.
set /p choice="Votre choix (1/2/3/4) : "

if "%choice%"=="1" set versionType=patch
if "%choice%"=="2" set versionType=minor
if "%choice%"=="3" set versionType=major
if "%choice%"=="4" set versionType=manual

if not defined versionType (
    echo ‚ùå Choix invalide !
    pause
    exit /b 1
)

echo.
echo ‚úÖ Type de version : %versionType%
echo.

REM ============================================================
REM √âtape 2 : Incr√©menter la version
REM ============================================================

if "%versionType%"=="manual" (
    echo.
    echo üìù Saisie manuelle de la version
    echo.
    REM Afficher la version actuelle
    for /f "delims=" %%i in ('powershell -NoProfile -Command "(Get-Content package.json | ConvertFrom-Json).version"') do set currentVersion=%%i
    echo Version actuelle : %currentVersion%
    echo.
    set /p version="Entrez la nouvelle version (ex: 2.1.3) : "
    
    if not defined version (
        echo ‚ùå Version vide !
        pause
        exit /b 1
    )
    
    echo.
    echo üîÑ Mise √† jour vers la version %version%...
    
    REM Mettre √† jour package.json avec la version manuelle
    powershell -NoProfile -Command "$pkg = Get-Content 'package.json' | ConvertFrom-Json; $pkg.version = '%version%'; $pkg | ConvertTo-Json -Depth 100 | Set-Content 'package.json'"
    if errorlevel 1 (
        echo ‚ùå Erreur lors de la mise √† jour de package.json
        pause
        exit /b 1
    )
    
    echo ‚úÖ package.json mis √† jour : %version%
    
) else (
    echo üîÑ Incr√©mentation de la version...
    
    call npm version %versionType% --no-git-tag-version
    if errorlevel 1 (
        echo ‚ùå Erreur lors de l'incr√©mentation de version
        pause
        exit /b 1
    )
    
    REM Lire la nouvelle version
    for /f "delims=" %%i in ('powershell -NoProfile -Command "(Get-Content package.json | ConvertFrom-Json).version"') do set version=%%i
    
    if not defined version (
        echo ‚ùå Impossible de lire la version
        pause
        exit /b 1
    )
    
    echo ‚úÖ package.json mis √† jour : %version%
)

REM Mettre √† jour tauri.conf.json (commun aux deux modes)
powershell -NoProfile -Command "$config = Get-Content 'src-tauri/tauri.conf.json' -Raw | ConvertFrom-Json; $config.version = '%version%'; $config | ConvertTo-Json -Depth 100 | Set-Content 'src-tauri/tauri.conf.json'"
if errorlevel 1 (
    echo ‚ùå Erreur lors de la mise √† jour de tauri.conf.json
    pause
    exit /b 1
)

echo ‚úÖ tauri.conf.json mis √† jour : %version%
echo.

REM ============================================================
REM √âtape 3 : Build de l'application
REM ============================================================

echo üî® Build de l'application Tauri v%version%...
echo    ‚è±Ô∏è  Cela peut prendre 2-3 minutes...
echo.

call npm run tauri:build
if errorlevel 1 (
    echo.
    echo ‚ùå Build √©chou√© !
    pause
    exit /b 1
)

echo.
echo ‚úÖ Build termin√© avec succ√®s !
echo.

REM ============================================================
REM √âtape 4 : V√©rifier les fichiers
REM ============================================================

echo üì¶ V√©rification des fichiers...

set "exePath=src-tauri\target\release\bundle\nsis\Formalyse_%version%_x64-setup.exe"
set "msiPath=src-tauri\target\release\bundle\msi\Formalyse_%version%_x64_en-US.msi"

if not exist "%exePath%" (
    echo ‚ùå Fichier introuvable : %exePath%
    pause
    exit /b 1
)

echo ‚úÖ Installateur : %exePath%
if exist "%msiPath%" (
    echo ‚úÖ MSI : %msiPath%
)
echo.

REM ============================================================
REM √âtape 5 : G√©n√©rer latest.json
REM ============================================================

echo üìù G√©n√©ration de latest.json...

powershell -NoProfile -ExecutionPolicy Bypass -File "%~dp0generate-latest-json.ps1" -Version "%version%"
if errorlevel 1 (
    echo ‚ùå Erreur lors de la g√©n√©ration de latest.json
    pause
    exit /b 1
)

echo ‚úÖ latest.json cr√©√© !
echo.

REM ============================================================
REM √âtape 6 : Commit et tag Git
REM ============================================================

echo üì¶ Commit et tag Git...

git add package.json package-lock.json src-tauri\tauri.conf.json src-tauri\Cargo.toml src-tauri\Cargo.lock
git commit -m "%version%"
if errorlevel 1 (
    echo ‚ö†Ô∏è  Aucun changement √† committer
)

git tag v%version% 2>nul
if errorlevel 1 (
    echo ‚ö†Ô∏è  Tag existe d√©j√†, √©crasement...
    git tag -d v%version%
    git tag v%version%
)

echo ‚úÖ Commit et tag cr√©√©s !
echo.

REM ============================================================
REM √âtape 7 : Push sur GitHub
REM ============================================================

echo üåê Push sur GitHub...

git push origin main
git push origin v%version% 2>nul
if errorlevel 1 (
    git push --force origin v%version%
)

echo ‚úÖ Pouss√© sur GitHub !
echo.

REM ============================================================
REM √âtape 8 : Cr√©er la release GitHub (Auto ou Manuel)
REM ============================================================

if "%AUTO_UPLOAD%"=="yes" (
    echo üéÅ Cr√©ation de la release GitHub automatique...
    echo.
    
    REM Appeler le script PowerShell pour cr√©er la release
    powershell -NoProfile -ExecutionPolicy Bypass -Command ^
    "$token = '%GITHUB_TOKEN%'; ^
    $version = '%version%'; ^
    $exePath = '%exePath%'; ^
    $msiPath = '%msiPath%'; ^
    $owner = '%REPO_OWNER%'; ^
    $repo = '%REPO_NAME%'; ^
    ^
    $headers = @{ ^
        'Authorization' = \"Bearer $token\"; ^
        'Accept' = 'application/vnd.github+json'; ^
        'X-GitHub-Api-Version' = '2022-11-28' ^
    }; ^
    ^
    Write-Host 'Cr√©ation de la release...' -ForegroundColor Cyan; ^
    $releaseBody = @{ ^
        tag_name = \"v$version\"; ^
        name = \"Formalyse v$version\"; ^
        body = \"## üöÄ Release v$version`n`nMise √† jour vers la version $version.`n`n### üì• Installation`n`nT√©l√©chargez l'installateur Windows ci-dessous.`n`n### üîÑ Mise √† jour automatique`n`nSi vous avez d√©j√† Formalyse install√©, l'application d√©tectera automatiquement cette mise √† jour.\"; ^
        draft = $false; ^
        prerelease = $false ^
    } ^| ConvertTo-Json; ^
    ^
    try { ^
        $release = Invoke-RestMethod -Uri \"https://api.github.com/repos/$owner/$repo/releases\" -Method POST -Headers $headers -Body $releaseBody -ContentType 'application/json'; ^
        Write-Host \"‚úÖ Release cr√©√©e: $($release.html_url)\" -ForegroundColor Green; ^
        ^
        $uploadUrl = $release.upload_url -replace '\{\?name,label\}', ''; ^
        ^
        Write-Host \"`nUpload de l'installateur...\" -ForegroundColor Cyan; ^
        $exeBytes = [System.IO.File]::ReadAllBytes((Resolve-Path $exePath)); ^
        $exeName = Split-Path $exePath -Leaf; ^
        Invoke-RestMethod -Uri \"$uploadUrl?name=$exeName\" -Method POST -Headers $headers -Body $exeBytes -ContentType 'application/octet-stream' ^| Out-Null; ^
        Write-Host \"‚úÖ $exeName upload√©\" -ForegroundColor Green; ^
        ^
        Write-Host \"`nUpload de latest.json...\" -ForegroundColor Cyan; ^
        $jsonBytes = [System.IO.File]::ReadAllBytes((Resolve-Path 'latest.json')); ^
        Invoke-RestMethod -Uri \"$uploadUrl?name=latest.json\" -Method POST -Headers $headers -Body $jsonBytes -ContentType 'application/json' ^| Out-Null; ^
        Write-Host \"‚úÖ latest.json upload√©\" -ForegroundColor Green; ^
        ^
        if (Test-Path $msiPath) { ^
            Write-Host \"`nUpload du MSI...\" -ForegroundColor Cyan; ^
            $msiBytes = [System.IO.File]::ReadAllBytes((Resolve-Path $msiPath)); ^
            $msiName = Split-Path $msiPath -Leaf; ^
            Invoke-RestMethod -Uri \"$uploadUrl?name=$msiName\" -Method POST -Headers $headers -Body $msiBytes -ContentType 'application/octet-stream' ^| Out-Null; ^
            Write-Host \"‚úÖ $msiName upload√©\" -ForegroundColor Green; ^
        }; ^
        ^
        Write-Host \"`n‚úÖ Release compl√®te !\" -ForegroundColor Green; ^
        Write-Host \"üåê Voir: $($release.html_url)\" -ForegroundColor Blue; ^
        exit 0; ^
    } catch { ^
        Write-Host \"`n‚ùå Erreur: $($_.Exception.Message)\" -ForegroundColor Red; ^
        Write-Host \"Passez en mode manuel...\" -ForegroundColor Yellow; ^
        exit 1; ^
    }"
    
    if errorlevel 1 (
        echo.
        echo ‚ö†Ô∏è  L'upload automatique a √©chou√©
        echo ‚ÑπÔ∏è  Passage en mode manuel
        set AUTO_UPLOAD=no
    )
)

if "%AUTO_UPLOAD%"=="no" (
    echo.
    echo ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    echo                  üìã Upload Manuel Requis                      
    echo ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    echo.
    echo üåê Ouvrir la page de release GitHub ? (y/n)
    set /p openBrowser="Votre choix : "
    
    if /i "!openBrowser!"=="y" (
        start https://github.com/%REPO_OWNER%/%REPO_NAME%/releases/new?tag=v%version%^&title=Formalyse%%20v%version%
        echo ‚úÖ Navigateur ouvert !
    )
    
    echo.
    echo üìÇ Ouvrir le dossier des fichiers ? (y/n)
    set /p openFolder="Votre choix : "
    
    if /i "!openFolder!"=="y" (
        explorer /select,"%exePath%"
        echo ‚úÖ Explorateur ouvert !
    )
    
    echo.
    echo üìã Fichiers √† uploader :
    echo    1. %exePath%
    echo    2. latest.json
    if exist "%msiPath%" echo    3. %msiPath%
)

REM ============================================================
REM R√©sum√© final
REM ============================================================

echo.
echo ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
echo                    ‚úÖ Release Termin√©e !                       
echo ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
echo.
echo üìã R√©capitulatif :
echo    ‚Ä¢ Version : %version%
echo    ‚Ä¢ Build : ‚úì
echo    ‚Ä¢ Git commit : ‚úì
echo    ‚Ä¢ Git tag : ‚úì
echo    ‚Ä¢ Push GitHub : ‚úì
if "%AUTO_UPLOAD%"=="yes" (
    echo    ‚Ä¢ Release GitHub : ‚úì
    echo    ‚Ä¢ Upload automatique : ‚úì
) else (
    echo    ‚Ä¢ Release GitHub : En attente d'upload manuel
)
echo.
echo üåê Release : https://github.com/%REPO_OWNER%/%REPO_NAME%/releases/tag/v%version%
echo.
echo üéØ Les utilisateurs recevront la notification de mise √† jour !
echo.

pause
