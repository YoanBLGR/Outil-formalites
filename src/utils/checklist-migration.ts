import type { ChecklistItem, ChecklistCategory } from '../types'

/**
 * R√®gles de mapping pour assigner automatiquement une cat√©gorie bas√©e sur le label
 */
const LABEL_TO_CATEGORY_MAP: Record<string, ChecklistCategory> = {
  // PREPARATION
  'Informations soci√©t√© collect√©es': 'PREPARATION',
  'Informations g√©rant/pr√©sident collect√©es': 'PREPARATION',
  'Devis sign√© re√ßu': 'PREPARATION',

  // REDACTION
  'Projet de statuts r√©dig√©': 'REDACTION',
  'Projet de statuts envoy√© au client': 'REDACTION',

  // DOCUMENTS
  'Attestation de d√©p√¥t des fonds re√ßue': 'DOCUMENTS',
  'CNI g√©rant/pr√©sident re√ßue': 'DOCUMENTS',
  'D√©claration de non condamnation re√ßue': 'DOCUMENTS',
  "Justificatif d'occupation du si√®ge re√ßu": 'DOCUMENTS',
  'Liste des souscripteurs √©tablie': 'DOCUMENTS',

  // SIGNATURE
  'Statuts sign√©s': 'SIGNATURE',
  'Annonce l√©gale r√©dig√©e': 'SIGNATURE',
  'Annonce l√©gale publi√©e': 'SIGNATURE',
  'Attestation de parution re√ßue': 'SIGNATURE',

  // FORMALITES
  'Recueil d\'informations': 'FORMALITES',
  'Formulaire M0 compl√©t√©': 'FORMALITES', // Ancien label pour compatibilit√©
  'Formalit√© saisie sur le Guichet Unique': 'FORMALITES',
  'Dossier transmis au greffe': 'FORMALITES',
}

/**
 * R√®gles de mapping pour assigner une ic√¥ne bas√©e sur le label
 */
const LABEL_TO_ICON_MAP: Record<string, string> = {
  'Informations soci√©t√© collect√©es': 'üè¢',
  'Informations g√©rant/pr√©sident collect√©es': 'üë§',
  'Devis sign√© re√ßu': 'üí∞',
  'Projet de statuts r√©dig√©': 'üìù',
  'Projet de statuts envoy√© au client': 'üì§',
  'Attestation de d√©p√¥t des fonds re√ßue': 'üè¶',
  'CNI g√©rant/pr√©sident re√ßue': 'ü™™',
  'D√©claration de non condamnation re√ßue': 'üìã',
  "Justificatif d'occupation du si√®ge re√ßu": 'üè†',
  'Liste des souscripteurs √©tablie': 'üìä',
  'Statuts sign√©s': '‚úíÔ∏è',
  'Annonce l√©gale r√©dig√©e': 'üì∞',
  'Annonce l√©gale publi√©e': 'üì¢',
  'Attestation de parution re√ßue': 'üìú',
  'Recueil d\'informations': 'üìã',
  'Formulaire M0 compl√©t√©': 'üìã', // Ancien label pour compatibilit√©
  'Formalit√© saisie sur le Guichet Unique': 'üíª',
  'Dossier transmis au greffe': 'üèõÔ∏è',
}

/**
 * Devine la cat√©gorie d'un item bas√© sur son label
 */
function guessCategory(label: string): ChecklistCategory {
  // Recherche exacte
  if (LABEL_TO_CATEGORY_MAP[label]) {
    return LABEL_TO_CATEGORY_MAP[label]
  }

  // Recherche par mots-cl√©s
  const lowerLabel = label.toLowerCase()

  if (lowerLabel.includes('information') || lowerLabel.includes('devis')) {
    return 'PREPARATION'
  }

  if (lowerLabel.includes('statut') && (lowerLabel.includes('r√©dig') || lowerLabel.includes('envoy√©'))) {
    return 'REDACTION'
  }

  if (
    lowerLabel.includes('attestation') ||
    lowerLabel.includes('cni') ||
    lowerLabel.includes('justificatif') ||
    lowerLabel.includes('d√©claration') ||
    lowerLabel.includes('liste')
  ) {
    return 'DOCUMENTS'
  }

  if (
    lowerLabel.includes('sign') ||
    lowerLabel.includes('annonce') ||
    lowerLabel.includes('parution')
  ) {
    return 'SIGNATURE'
  }

  if (
    lowerLabel.includes('formulaire') ||
    lowerLabel.includes('formalit√©') ||
    lowerLabel.includes('greffe') ||
    lowerLabel.includes('guichet')
  ) {
    return 'FORMALITES'
  }

  // Par d√©faut
  return 'PREPARATION'
}

/**
 * Devine l'ic√¥ne d'un item bas√© sur son label
 */
function guessIcon(label: string): string {
  // Recherche exacte
  if (LABEL_TO_ICON_MAP[label]) {
    return LABEL_TO_ICON_MAP[label]
  }

  // Ic√¥nes par d√©faut bas√©es sur les mots-cl√©s
  const lowerLabel = label.toLowerCase()

  if (lowerLabel.includes('document') || lowerLabel.includes('attestation')) return 'üìÑ'
  if (lowerLabel.includes('sign')) return '‚úçÔ∏è'
  if (lowerLabel.includes('envoi') || lowerLabel.includes('envoy√©')) return 'üì§'
  if (lowerLabel.includes('re√ßu')) return 'üì•'
  if (lowerLabel.includes('statut')) return 'üìù'
  if (lowerLabel.includes('annonce')) return 'üì∞'
  if (lowerLabel.includes('greffe') || lowerLabel.includes('guichet')) return 'üèõÔ∏è'

  return '‚úÖ' // Ic√¥ne par d√©faut
}

/**
 * Migre un item de checklist vers le nouveau format avec cat√©gorie et ic√¥ne
 */
export function migrateChecklistItem(item: ChecklistItem): ChecklistItem {
  // Si l'item a d√©j√† une cat√©gorie et une ic√¥ne, le retourner tel quel
  if (item.category && item.icon) {
    return item
  }

  return {
    ...item,
    category: item.category || guessCategory(item.label),
    icon: item.icon || guessIcon(item.label),
  }
}

/**
 * Migre une liste compl√®te d'items de checklist
 */
export function migrateChecklist(items: ChecklistItem[]): ChecklistItem[] {
  return items.map(migrateChecklistItem)
}

/**
 * V√©rifie si une checklist n√©cessite une migration
 */
export function needsMigration(items: ChecklistItem[]): boolean {
  return items.some((item) => !item.category || !item.icon)
}

/**
 * Obtient des statistiques sur la migration
 */
export function getMigrationStats(items: ChecklistItem[]): {
  total: number
  needsMigration: number
  byCategory: Record<ChecklistCategory, number>
} {
  const stats = {
    total: items.length,
    needsMigration: 0,
    byCategory: {
      PREPARATION: 0,
      REDACTION: 0,
      DOCUMENTS: 0,
      SIGNATURE: 0,
      FORMALITES: 0,
    } as Record<ChecklistCategory, number>,
  }

  items.forEach((item) => {
    if (!item.category || !item.icon) {
      stats.needsMigration++
    }
    const category = item.category || guessCategory(item.label)
    stats.byCategory[category]++
  })

  return stats
}
