import type { ChecklistItem, FormeJuridique, ChecklistCategory } from '../types'
import { v4 as uuidv4 } from 'uuid'

export const CHECKLIST_CATEGORY_CONFIG = {
  PREPARATION: {
    label: 'Pr√©paration',
    description: 'Collecte des informations et devis',
    icon: 'üìã',
    color: 'blue',
  },
  REDACTION: {
    label: 'R√©daction',
    description: 'R√©daction et envoi des documents',
    icon: '‚úçÔ∏è',
    color: 'purple',
  },
  DOCUMENTS: {
    label: 'Documents',
    description: 'R√©ception des documents officiels',
    icon: 'üìÑ',
    color: 'green',
  },
  SIGNATURE: {
    label: 'Signature',
    description: 'Signature et annonce l√©gale',
    icon: '‚úíÔ∏è',
    color: 'orange',
  },
  FORMALITES: {
    label: 'Formalit√©s',
    description: 'D√©marches administratives',
    icon: 'üèõÔ∏è',
    color: 'red',
  },
}

export function generateChecklist(formeJuridique: FormeJuridique): ChecklistItem[] {
  const baseChecklist: Omit<ChecklistItem, 'id'>[] = [
    // PREPARATION
    {
      label: 'Informations soci√©t√© collect√©es',
      description: 'D√©nomination, si√®ge social, capital, objet social',
      completed: false,
      required: true,
      category: 'PREPARATION',
      icon: 'üè¢',
    },
    {
      label: 'Informations g√©rant/pr√©sident collect√©es',
      description: '√âtat civil, adresse, nationalit√©',
      completed: false,
      required: true,
      category: 'PREPARATION',
      icon: 'üë§',
    },
    {
      label: 'Devis sign√© re√ßu',
      description: 'Devis accept√© et retourn√© sign√©',
      completed: false,
      required: true,
      category: 'PREPARATION',
      icon: 'üí∞',
    },
    // REDACTION
    {
      label: 'Projet de statuts r√©dig√©',
      description: 'Statuts r√©dig√©s selon les informations fournies',
      completed: false,
      required: true,
      category: 'REDACTION',
      icon: 'üìù',
    },
    {
      label: 'Projet de statuts envoy√© au client',
      description: 'Projet transmis pour validation',
      completed: false,
      required: true,
      category: 'REDACTION',
      icon: 'üì§',
    },
    // DOCUMENTS
    {
      label: 'Attestation de d√©p√¥t des fonds re√ßue',
      description: 'Preuve du d√©p√¥t du capital social',
      completed: false,
      required: true,
      category: 'DOCUMENTS',
      icon: 'üè¶',
    },
    {
      label: 'CNI g√©rant/pr√©sident re√ßue',
      description: 'Copie recto-verso de la carte d\'identit√©',
      completed: false,
      required: true,
      category: 'DOCUMENTS',
      icon: 'ü™™',
    },
    {
      label: 'D√©claration de non condamnation re√ßue',
      description: 'D√©claration sur l\'honneur sign√©e',
      completed: false,
      required: true,
      category: 'DOCUMENTS',
      icon: 'üìã',
    },
    {
      label: 'Justificatif d\'occupation du si√®ge re√ßu',
      description: 'Bail, titre de propri√©t√© ou attestation',
      completed: false,
      required: true,
      category: 'DOCUMENTS',
      icon: 'üè†',
    },
    // SIGNATURE
    {
      label: 'Statuts sign√©s',
      description: 'Statuts d√©finitifs paraph√©s et sign√©s',
      completed: false,
      required: true,
      category: 'SIGNATURE',
      icon: '‚úçÔ∏è',
    },
    {
      label: 'Annonce l√©gale r√©dig√©e',
      description: 'R√©daction de l\'avis de constitution',
      completed: false,
      required: true,
      category: 'SIGNATURE',
      icon: 'üì∞',
    },
    {
      label: 'Annonce l√©gale publi√©e',
      description: 'Publication dans un journal habilit√©',
      completed: false,
      required: true,
      category: 'SIGNATURE',
      icon: 'üì¢',
    },
    {
      label: 'Attestation de parution re√ßue',
      description: 'Justificatif de publication',
      completed: false,
      required: true,
      category: 'SIGNATURE',
      icon: 'üìú',
    },
    // FORMALITES
    {
      label: 'Recueil d\'informations',
      description: 'Collecte des informations pour la d√©claration',
      completed: false,
      required: true,
      category: 'FORMALITES',
      icon: 'üìã',
    },
    {
      label: 'Formalit√© saisie sur le Guichet Unique',
      description: 'Dossier d√©pos√© en ligne sur le guichet unique',
      completed: false,
      required: true,
      category: 'FORMALITES',
      icon: 'üíª',
    },
    {
      label: 'Dossier transmis au greffe',
      description: 'Confirmation de transmission au greffe comp√©tent',
      completed: false,
      required: true,
      category: 'FORMALITES',
      icon: '‚öñÔ∏è',
    },
  ]

  // Ajouter la liste des souscripteurs pour SAS/SASU
  if (formeJuridique === 'SAS' || formeJuridique === 'SASU') {
    baseChecklist.splice(9, 0, {
      label: 'Liste des souscripteurs √©tablie',
      description: 'Liste compl√®te des souscripteurs avec montants',
      completed: false,
      required: true,
      category: 'DOCUMENTS',
      icon: 'üìä',
      formeJuridique: ['SAS', 'SASU'],
    })
  }

  return baseChecklist.map((item) => ({
    ...item,
    id: uuidv4(),
  }))
}

export function getChecklistProgress(items: ChecklistItem[]): {
  total: number
  completed: number
  byCategory: Record<ChecklistCategory, { total: number; completed: number }>
} {
  const byCategory: Record<ChecklistCategory, { total: number; completed: number }> = {
    PREPARATION: { total: 0, completed: 0 },
    REDACTION: { total: 0, completed: 0 },
    DOCUMENTS: { total: 0, completed: 0 },
    SIGNATURE: { total: 0, completed: 0 },
    FORMALITES: { total: 0, completed: 0 },
  }

  items.forEach((item) => {
    // V√©rification de s√©curit√© : ignorer les items sans cat√©gorie ou avec cat√©gorie invalide
    if (!item.category || !byCategory[item.category as ChecklistCategory]) {
      // Cat√©gorie par d√©faut pour les anciens items sans cat√©gorie
      const defaultCategory: ChecklistCategory = 'PREPARATION'
      if (byCategory[defaultCategory]) {
        byCategory[defaultCategory].total++
        if (item.completed) {
          byCategory[defaultCategory].completed++
        }
      }
      return
    }

    byCategory[item.category as ChecklistCategory].total++
    if (item.completed) {
      byCategory[item.category as ChecklistCategory].completed++
    }
  })

  const total = items.length
  const completed = items.filter((item) => item.completed).length

  return { total, completed, byCategory }
}
